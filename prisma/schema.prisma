// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  passwordHash String
  role         UserRole @default(STUDENT)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  student      Student?
  faculty      Faculty?

  @@map("users")
}

model Student {
  id            String   @id @default(cuid())
  studentId     String   @unique // S<8-digit-ID> format
  qrCodeValue   String   @unique
  qrCodeImageUrl String?
  course        String   // Student's course (e.g., BSCRIM, BSED - English, BEED, etc.)
  yearLevel     String   // Student's year level (e.g., 1st Year, 2nd Year, 3rd Year, 4th Year, 5th Year)
  userId        String   @unique
  createdAt     DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  attendance   Attendance[]

  @@map("students")
}

model Faculty {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("faculty")
}

model Attendance {
  id           String        @id @default(cuid())
  studentId    String
  timestamp    DateTime      @default(now())
  sessionType  SessionType   // MORNING_IN, MORNING_OUT, AFTERNOON_IN, AFTERNOON_OUT
  sessionDate  DateTime      @default(now()) // Date part only for grouping
  gateLocation String?       // Optional gate/location field
  notes        String?       // Optional notes (late arrival, early departure, etc.)
  createdAt    DateTime      @default(now())

  // Relations
  student     Student        @relation(fields: [studentId], references: [id], onDelete: Cascade)

  // Composite unique constraint to prevent duplicate entries for same session
  @@unique([studentId, sessionType, sessionDate])
  @@map("attendance")
}

enum UserRole {
  ADMIN
  FACULTY
  STUDENT
}

enum SessionType {
  MORNING_IN      // Morning arrival
  MORNING_OUT     // Morning departure
  AFTERNOON_IN    // Afternoon arrival
  AFTERNOON_OUT   // Afternoon departure
}
