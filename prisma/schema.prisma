generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  passwordHash String
  role         UserRole @default(STUDENT)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  faculty      Faculty?
  student      Student?

  @@map("users")
}

model Student {
  id             String       @id @default(cuid())
  studentId      String       @unique
  qrCodeValue    String       @unique
  qrCodeImageUrl String?
  userId         String       @unique
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  course         String
  yearLevel      String
  attendance     Attendance[]
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("students")
}

model Faculty {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("faculty")
}

model Attendance {
  id           String      @id @default(cuid())
  studentId    String
  timestamp    DateTime    @default(now())
  gateLocation String?
  createdAt    DateTime    @default(now())
  notes        String?
  sessionDate  DateTime    @default(now())
  sessionType  SessionType
  student      Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, sessionType, sessionDate])
  @@map("attendance")
}

enum UserRole {
  ADMIN
  FACULTY
  STUDENT
}

enum SessionType {
  MORNING_IN
  MORNING_OUT
  AFTERNOON_IN
  AFTERNOON_OUT
}
